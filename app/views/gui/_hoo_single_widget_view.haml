%div#menuBar{ :style=>"background-color:#666; width:100%;height:33px;"}
	%ul.dropdown
		%li.smallType
			Widgets
			%ul.sub_menu.smallType
				%li lorem ipsum view
				%li lorem ipsum title view
				%li info view one

/ The main content div
%div#resizable{ :style=>"background-color:#eee; width:400px;height:400px; position:absolute; left:50px; top:150px;"}
	%p{ :style=>"background-color:#ff0000; margin:10px;"} !!! Render The Widget Here !!!

/ The left handle div
%div#left_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:200px; left:60px;"}

/ The right handle div
%div#right_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:200px; left:600px;"}

/ The top handle div
%div#top_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:125px; left:200px;"}

/ The Bottom handle div
%div#bottom_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:450px; left:200px;"}

:javascript

	// Helpers
	$.fn.assertSize = function(size) {
	  if (this.size() != size) {
		alert("Expected " + size + " elements, but got " + this.size() + ".");
	  }
	  return this;
	};

	// Base Class
	(function() {
		var global = this;
		global.BaseClass = function() {
		return {};
	};})();

	// HooPage Class
	(function() {
		var global = this;
		global.HooPage = function() {
			var self = new BaseClass();

			var _resizeableDiv	= new ResizeableDiv( $('#resizable') );
			var _leftHandle		= new Handle( $('#left_handle') );
			var _rightHandle	= new Handle( $('#right_handle') );
			var _topHandle		= new Handle( $('#top_handle') );
			var _bottomHandle	= new Handle( $('#bottom_handle') );

			_leftHandle.initBindingsTo( _resizeableDiv, 'left' );
			_rightHandle.initBindingsTo( _resizeableDiv, 'right' );
			_topHandle.initBindingsTo( _resizeableDiv, 'top' );
			_bottomHandle.initBindingsTo( _resizeableDiv, 'bottom' );

			// somehow kick it off with sensible values
			_resizeableDiv.setLeftBounds( _leftHandle.rightBounds() );
			_resizeableDiv.setRightBounds( _rightHandle.leftBounds() );
			_resizeableDiv.setTopBounds( _topHandle.bottomBounds() );
			_resizeableDiv.setBottomBounds( _bottomHandle.topBounds() );

			return self;
		};
	})();

	// Basic Div Class
	(function() {
		var global = this;
		global.BasicDiv = function( $targetDiv ) {

			var self = new BaseClass();

			// ivars
			var _$div = $targetDiv.assertSize(1);

			function _leftBounds() {
				return _$div.position().left;
			}

			function _rightBounds() {
				return _leftBounds()+_width();
			}

			function _bottomBounds() {
				return _topBounds() + _height();
			}

			function _topBounds() {
				return _$div.position().top;
			}

			function _width() {
				return _$div.width();
			}

			function _height() {
				return _$div.height();
			}

			function _setLeftBounds( leftVal ) {

				var newWidth = _width()+_leftBounds()-leftVal;
				_$div.css( 'left', leftVal );
				_$div.css( 'width', newWidth );
			}

			function _setRightBounds( rightVal ) {

				var newWidth = rightVal - _leftBounds();
				_$div.css( 'width', newWidth );
			}

			function _setBottomBounds( bottomBounds ) {

				var newHeight = bottomBounds-_topBounds();
				_$div.css( 'height', newHeight );
			}

			function _setTopBounds( topBounds ) {

				var newHeight = _height()-(topBounds-_topBounds());
				_$div.css( 'top', topBounds );
				_$div.css( 'height', newHeight );
			}

			self.$div				= _$div;
			self.leftBounds			= _leftBounds;
			self.rightBounds		= _rightBounds;
			self.bottomBounds		= _bottomBounds;
			self.topBounds			= _topBounds;
			self.setLeftBounds		= _setLeftBounds;
			self.setRightBounds		= _setRightBounds;
			self.setBottomBounds	= _setBottomBounds;
			self.setTopBounds 		= _setTopBounds;
			self.width 				= _width;
			self.height				= _height;
			return self;
		};
	})();

	// Resizeable Div Class
	(function() {
		var global = this;
		global.ResizeableDiv = function( $targetDiv ) {

			var self = new BasicDiv( $targetDiv );

			return self;
		};
	})();

	// Handle Class
	(function() {
		var global = this;
		global.Handle = function( $targetDiv ) {

			// ivars
			var self = new BasicDiv( $targetDiv );

			var _boundToObject;

			function _initBindingsTo( resizeableDiv, side ) {

				_boundToObject = resizeableDiv;
				self.$div.mousedown( function($event){ return horizontalDrag( $event, _boundToObject.htmlElement, side ); } );
			}

			function horizontalDrag( $event, $puppet, cssProp ) {

				// var $jqueryClickedObject = $($event.target); // notice how we wrap HTMLDivElement
				var $clickedObjectPos = self.$div.offset();
				var mouseDownPt = { x:$event.pageX, y:$event.pageY };
				var offsetFromCentrePt = { x:(mouseDownPt.x-$clickedObjectPos.left-self.$div.width()/2), y:(mouseDownPt.y-$clickedObjectPos.top-self.$div.height()/2) };
				// console.warn( "offset from centre = "+offsetFromCentrePt.x + ", "+offsetFromCentrePt.y );

				$('body').bind('mouseup', mouseup);

				mouseMoveData = { offset:offsetFromCentrePt, tcssProp:cssProp };
				$('body').bind('mousemove', mouseMoveData, mousemove);
			}

			function mouseup( $event ) {

				$('body').unbind('mousemove');
				$('body').unbind('mouseup');
			}

			function mousemove( $event ) {

				var clickedPos = { x:$event.pageX, y:$event.pageY };
				var newPos = { x:(clickedPos.x-self.$div.width()/2), y:(clickedPos.y-self.$div.height()/2) };
				var $objectToManipulate = _boundToObject.htmlElement;
				var cssProp = $event.data.tcssProp;

				if( cssProp=='left' ) {
					self.$div.css( 'left', newPos.x-$event.data.offset.x );
					var newXPos = self.$div.offset().left+self.$div.width();
					_boundToObject.setLeftBounds( newXPos );

				} else if( cssProp=='right') {
					self.$div.css( 'left', newPos.x-$event.data.offset.x );
					var newXPos = self.$div.offset().left;
					_boundToObject.setRightBounds( newXPos );

				} else if( cssProp=='top') {
					self.$div.css( 'top', newPos.y-$event.data.offset.y );
					var newYPos = self.$div.offset().top+self.$div.height();
					_boundToObject.setTopBounds( newYPos );

				} else if( cssProp=='bottom') {
					self.$div.css( 'top', newPos.y-$event.data.offset.y );
					var newYPos = self.$div.offset().top;
					_boundToObject.setBottomBounds( newYPos );

				} else {
					alert("countdown to detenation - 10 "+cssProp);
				}
			}

			self.initBindingsTo = _initBindingsTo;
			return self;
		};
	})();

	function testLoadSomeHTMLByAjax() {
		$.ajax({
			url: '/pages/_ajaxHTML',
			data:{"urlpath":"hello steven"},
			success: function(data,textStatus,xmlhttprequestobject) {
					$(data).appendTo($('#resizable'));
				},
			dataType:"html"
		});
	}

	// Lets kick it all off
	$(document).ready(function(){

		testLoadSomeHTMLByAjax();

		_page = new HooPage();

		// Drop down menu
		$("ul.dropdown li").hover(function(){
			$(this).addClass("hover");
			$('ul:first',this).css('visibility', 'visible');
		}, function(){
			$(this).removeClass("hover");
			$('ul:first',this).css('visibility', 'hidden');
		});
		$("ul.dropdown li ul li:has(ul)").find("a:first").append(" &raquo; ");

	});
