-# http://0.0.0.0:3000/widgets/HeadlessFlashMp3Test
-# http://shooley.audioboo.fm:3000/widgets/HeadlessFlashMp3Test

-# push( headless_flash_mp3_test)

- wrapLiveObject( _, :style=>'border:1px solid black; margin:3px; background-color: white;' ) do
	-# TODO: really we want a link here, right? Then in js we remove the link and show the image,
	-# or we could put the image in as well as the link. Ok, so the link is optional
	= image_tag("rails.png", :style=>"width:75px; height:75px; padding-right: 10px; padding-top: 5px;" )
	= link_to "click to play mp3", _.mp3Url

- if( _.includeOnce? )
	:javascript

		/*
		 * Only one of these per page
		*/
		ABoo.NewFlashHeadlessPlayerSingleton = ABoo.NewAbstractHeadlessPlayerSingleton.extend({
			_swfSrc: "HeadlessPlayer/lib/Debug/HeadlessPlayer",
			_headlessFlashOb: undefined,

			// create the backing swf
			init: function( /* init never has args */ ) {
				this._super();
				var flashURL = ABoo.HeadlessSharedFlashObject.uRLForSwf( this._swfSrc );

				// varoius autostart options here - load, play, etc. - cant really use 'em to stay consistent with html5 audio
				this._headlessFlashOb = ABoo.HeadlessSharedFlashObject.sharedSwfForURL( flashURL, '100%', '100%', {autostart:'load'} );
				this._audioPlayingDomNode = this._headlessFlashOb;
			},

			_getTimeRangeEnd: function( timeRanges, timeRangeIndex ) {
				return timeRanges[timeRangeIndex][1];
			}
		});
		SC.mixin( ABoo.NewFlashHeadlessPlayerSingleton, ABoo.SingletonClassMethods );


		/*
		 * One of these for each instance on the page
		*/
		ABoo.NewFlashHeadlessPlayerBackend = ABoo.NewAbstractHeadlessPlayerBackend.extend({
			_createSingletonPlayer: function() {
				this._headLessSingleton = ABoo.NewFlashHeadlessPlayerSingleton.sharedInstance();
			}
		});


		/*
		 * Small Player with canvas front-end (flash backend)
		*/
		#{_.qualifiedJsClassName} = ABoo.NewAbstractSmallPlayer.extend( ABoo.PropertyAnimMixin, {

			didInsertElement: function() {
				this._super();

				var noJsAnchor$ = this.getFirstDomItemOfType("a");
				noJsAnchor$.remove();

				this._placeHolder$ = this.getFirstDomItemOfType("img");
				this._playerBackend = ABoo.NewFlashHeadlessPlayerBackend.create( {_controller:this, _mp3URL:this.json.mp3Url} );
			}


			// TODO: boiler plate - move
			//animateLoadProgress: function( from, to ) {

				//var fromProgressVal = { progress: from };
			//	this.fakeLoadProgress = from;	// we need the fake because i dont think we can stop $animate directly setting some value, and we need to make sure the setter is called for the real property that we want to set
			//	var toLoadProgressVal = { fakeLoadProgress: to };
			//	var self = this;
			//	jQuery(this).animate( toLoadProgressVal, {
			//		duration: 1000,
			//		step: function(now, fx) {
			//			// console.log("Anim: "+fx.elem.id + ' ' + fx.prop + ': ' + now);
			//			self.set('_loadProgress', now );
			//		},
			//		queue: false
			//	});
			//},

			// TODO: boiler plate - move
			//animatePlayProgress: function( from, to ) {
				//var fromProgressVal = { progress: from };
			//	this.fakePlayProgress = from;	// we need the fake because i dont think we can stop $animate directly setting some value, and we need to make sure the setter is called for the real property that we want to set
			//	var toPlayProgressVal = { fakePlayProgress: to };
			//	var self = this;
			//	jQuery(this).animate( toPlayProgressVal, {
			//		duration: 1000,
			//		step: function(now, fx) {
			//			//console.log("Anim: "+fx.elem.id + ' ' + fx.prop + ': ' + now);
			//			self.set('_playProgress', now );
			//		},
			//		queue: false
			//	});
			//}


		});


