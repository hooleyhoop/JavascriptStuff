- push( hoo_widget_resizer_view )

%div[_]{ :style=>"width:400px;height:400px; position:absolute; left:50px; top:150px;"}
	- if _.views.count > 0
		=  insert( _.views, "" )
	- else
		%p{ :style=>"background-color:#ff0000; margin:10px;"} !!! Render The Widget Here !!!

/ The left handle div
%div#left_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:200px; left:60px;"}

/ The right handle div
%div#right_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:200px; left:600px;"}

/ The top handle div
%div#top_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:125px; left:200px;"}

/ The Bottom handle div
%div#bottom_handle{ :style=>"background-color:#333; position:absolute; width:33px; height:33px; top:450px; left:200px;"}

-# Obviously we cannot leave this here as it is crazy to include it more than once
- if( _.includeOnce? )

	:javascript

		// Helpers
		$.fn.assertSize = function(size) {
		  if (this.size() != size) {
			alert("Expected " + size + " elements, but got " + this.size() + ".");
		  }
		  return this;
		};

		// Base Class
		(function() {
			var global = this;
			global.BaseClass = function() {
			return {};
		};})();

		// HooPage Class
		(function() {
			var global = this;
			global.HooPage = function() {
				var self = new BaseClass();

				var _resizeableDiv	= new ResizeableDiv( $( '#{_.uniqueSelector}' ) );
				var _leftHandle		= new Handle( $('#left_handle') );
				var _rightHandle	= new Handle( $('#right_handle') );
				var _topHandle		= new Handle( $('#top_handle') );
				var _bottomHandle	= new Handle( $('#bottom_handle') );

				_leftHandle.initBindingsTo( _resizeableDiv, 'left' );
				_rightHandle.initBindingsTo( _resizeableDiv, 'right' );
				_topHandle.initBindingsTo( _resizeableDiv, 'top' );
				_bottomHandle.initBindingsTo( _resizeableDiv, 'bottom' );

				// somehow kick it off with sensible values
				_resizeableDiv.setLeftBounds( _leftHandle.rightBounds() );
				_resizeableDiv.setRightBounds( _rightHandle.leftBounds() );
				_resizeableDiv.setTopBounds( _topHandle.bottomBounds()  + (15- _topHandle.bottomBounds() %15) );

				_resizeableDiv.setBottomBounds( _bottomHandle.topBounds() );

				return self;
			};
		})();

		// Basic Div Class
		(function() {
			var global = this;
			global.BasicDiv = function( $targetDiv ) {

				var self = new BaseClass();

				// ivars
				var _$div = $targetDiv.assertSize(1);

				function _leftBounds() {
					return _$div.position().left;
				}

				function _rightBounds() {
					return _leftBounds()+_width();
				}

				function _bottomBounds() {
					return _topBounds() + _height();
				}

				function _topBounds() {
					return _$div.position().top;
				}

				function _width() {
					return _$div.width();
				}

				function _height() {
					return _$div.height();
				}

				function _setLeftBounds( leftVal ) {

					var newWidth = _width()+_leftBounds()-leftVal;
					_$div.css( 'left', leftVal );
					_$div.css( 'width', newWidth );
				}

				function _setRightBounds( rightVal ) {

					var newWidth = rightVal - _leftBounds();
					_$div.css( 'width', newWidth );
				}

				function _setBottomBounds( bottomBounds ) {

					var newHeight = bottomBounds-_topBounds();
					_$div.css( 'height', newHeight );
				}

				function _setTopBounds( topBounds ) {

					var newHeight = _height()-(topBounds-_topBounds());
					_$div.css( 'top', topBounds );
					_$div.css( 'height', newHeight );
				}

				self.$div				= _$div;
				self.leftBounds			= _leftBounds;
				self.rightBounds		= _rightBounds;
				self.bottomBounds		= _bottomBounds;
				self.topBounds			= _topBounds;
				self.setLeftBounds		= _setLeftBounds;
				self.setRightBounds		= _setRightBounds;
				self.setBottomBounds	= _setBottomBounds;
				self.setTopBounds 		= _setTopBounds;
				self.width 				= _width;
				self.height				= _height;
				return self;
			};
		})();

		// Resizeable Div Class
		(function() {
			var global = this;
			global.ResizeableDiv = function( $targetDiv ) {

				var self = new BasicDiv( $targetDiv );

				return self;
			};
		})();

		// Handle Class
		(function() {
			var global = this;
			global.Handle = function( $targetDiv ) {

				// ivars
				var self = new BasicDiv( $targetDiv );

				var _boundToObject;

				function _initBindingsTo( resizeableDiv, side ) {

					_boundToObject = resizeableDiv;
					self.$div.mousedown( function($event){ return horizontalDrag( $event, _boundToObject.htmlElement, side ); } );
				}

				function horizontalDrag( $event, $puppet, cssProp ) {

					// var $jqueryClickedObject = $($event.target); // notice how we wrap HTMLDivElement
					var $clickedObjectPos = self.$div.offset();
					var mouseDownPt = { x:$event.pageX, y:$event.pageY };
					var offsetFromCentrePt = { x:(mouseDownPt.x-$clickedObjectPos.left-self.$div.width()/2), y:(mouseDownPt.y-$clickedObjectPos.top-self.$div.height()/2) };
					// console.warn( "offset from centre = "+offsetFromCentrePt.x + ", "+offsetFromCentrePt.y );

					$('body').bind('mouseup', mouseup);

					mouseMoveData = { offset:offsetFromCentrePt, tcssProp:cssProp };
					$('body').bind('mousemove', mouseMoveData, mousemove);
				}

				function mouseup( $event ) {

					$('body').unbind('mousemove');
					$('body').unbind('mouseup');
				}

				function mousemove( $event ) {

					var clickedPos = { x:$event.pageX, y:$event.pageY };
					var newPos = { x:(clickedPos.x-self.$div.width()/2), y:(clickedPos.y-self.$div.height()/2) };
					var $objectToManipulate = _boundToObject.htmlElement;
					var cssProp = $event.data.tcssProp;

					if( cssProp=='left' ) {
						self.$div.css( 'left', newPos.x-$event.data.offset.x );
						var newXPos = self.$div.offset().left+self.$div.width();
						_boundToObject.setLeftBounds( newXPos );

					} else if( cssProp=='right') {
						self.$div.css( 'left', newPos.x-$event.data.offset.x );
						var newXPos = self.$div.offset().left;
						_boundToObject.setRightBounds( newXPos );

					} else if( cssProp=='top') {

						var constrainedYpos = $event.data.offset.y;
						self.$div.css( 'top', newPos.y-constrainedYpos );
						var newYPos = self.$div.offset().top+self.$div.height();
						newYPos = newYPos + (15-newYPos%15)

						_boundToObject.setTopBounds( newYPos );

					} else if( cssProp=='bottom') {
						self.$div.css( 'top', newPos.y-$event.data.offset.y );
						var newYPos = self.$div.offset().top;
						_boundToObject.setBottomBounds( newYPos );

					} else {
						alert("countdown to detenation - 10 "+cssProp);
					}
				}

				self.initBindingsTo = _initBindingsTo;
				return self;
			};
		})();

		/* ok, so this is called by clicking a widget link */
		function loadSomeHTMLByAjax2( arg ) {

			$.ajax({
				url: '/pages/_singlePartialViaAjaxFromParam',
				data:{"urlpath": arg},
				success: function(data,textStatus,xmlhttprequestobject) {
						var newEle = $(data).appendTo($( '#{_.uniqueSelector}' ).empty());
						// see if it has any javascript that needs running!

						/* If the parent contains a data attribute need to make sure that this doesn't recreate the jscript instance */
						createJSObjectsFromRubyObjects( $('#{_.uniqueSelector}') );
					},
				dataType:"html"
			});
		}

		// Lets kick it all off
		$(document).ready(function(){

			// build the javascript model
			_page = new HooPage();

			// load default content by ajax
			//loadSomeHTMLByAjax2( '#{_.dataSrc.defaultItem}' );
		});

		// make coloured objects transparent
		function hackColors() {

			$.each( $('*'), function(index, value) {
				$each = $(value);
				var col1 = hooRGB($each.css('color'));
				if( (col1[0]==0 && col1[1]==0 && col1[2]==0)==false )
					$each.css('color', 'rgba(0, 70, 255, 0.5)' );

				var col2 = hooRGB($each.css('background-color'));
				if(col2!='')
					$each.css('opacity', 0.75 );


			});
		}

		function hooRGB( color ){

			if( typeof color=='string' ){
				if( isRGBColor( fmtColor(color,'rgb'))){
					return [parseInt(RegExp.$1),parseInt(RegExp.$2),parseInt(RegExp.$3)];
			}
			return [];
		}else if(color instanceof Array && color.length == 3
		&& isFinite(color[0]-0) && isFinite(color[1]-0) && isFinite(color[2]-0)
		&& ( 0 <= color[0]-0 && color[0] -0 <= 255)
		&& ( 0 <= color[1]-0 && color[1] -0 <= 255)
		&& ( 0 <= color[2]-0 && color[2] -0 <= 255)){
		return 'rgb('+color[0]+', '+color[1] + ', ' + color[2]+')';
		}
		return color;
		}

		function fmtColor( color,fmt ){
			if( isColor(color) == false) return color;
			var pad = function(str){
			if(str.length < 2){
			for(var i = 0,len = 2 - str.length ; i<len ; i++){
			str = '0'+str;
			}
			}
			return str;
			}
			if(color.match(/^#[0-9a-fA-F]{3}$/)){
			var r = color.substr(1,1);
			var g = color.substr(2,1);
			var b = color.substr(3,1);
			color = '#' + r + r + g + g + b + b;
			}

			fmt = (fmt)?fmt:(function(c){
			if( isRGBColor(c)) return 'hexadecimal';
			else if( isHexadecimalColor(c)) return 'rgb';
			else return '';
			})(color);
			if (fmt == 'rgb' && isHexadecimalColor(color)) {
			var r = parseInt(color.substr(1,2),16);
			var g = parseInt(color.substr(3,2),16);
			var b = parseInt(color.substr(5,2),16);
			color = $.RGB([r,g,b]);
			}else if (fmt == 'hexadecimal') {
			var c = $.RGB(color);
			if(c.length == 3){
			var r = pad(c[0].toString(16)),g = pad(c[1].toString(16)),b= pad(c[2].toString(16));
			color = '#' + r + g + b;
			}
			}
			return color;
		}

		function isColor(color) {
			if( isHexadecimalColor(color) || isRGBColor(color)) return true;
			else    return false;
		}

		function isHexadecimalColor(color){
			if(color && color.match
			&& ( color.match(/^#[0-9a-fA-F]{3}$/) || color.match(/^#[0-9a-fA-F]{6}$/)) ) return true;
			else return false;
		}

		function isRGBColor(color){
			if(color && color.match && color.match(/^rgb\(([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|[2][5][0-5]),[ ]{0,1}([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|[2][5][0-5]),[ ]{0,1}([0-9]|[1-9][0-9]|[1][0-9]{2}|[2][0-4][0-9]|[2][5][0-5])\)$/) ) return true;
			else return false;
		}
