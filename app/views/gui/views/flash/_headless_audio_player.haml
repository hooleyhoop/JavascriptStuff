- push( headless_audio_player )

-# This is a adapted from adam's player
-# http://0.0.0.0:3000/widgets/headlessPlayer
-# http://0.0.0.0:3000/widgets/detailPlayer?url=http://audioboo.fm/boos/313426-the-rose.mp3
-# http://0.0.0.0:3000/widgets/detailPlayer?url=http://audioboo.fm/boos/305019-taking-frank-to-the-vet.mp3
-# http://0.0.0.0:3000/widgets/detailPlayer?url=http://audioboo.fm/boos/197170.mp3
%div[_]{ :data=>{'jsclass'=>'HeadlessAudioplayer', 'autoplay'=>'false', 'preload'=>'true'} }
	.flash_holder( style="width:50px; height:50px; background-color:#00ffff;")

	- link_to( _.mp3Url, {:style =>"position:absolute; left:-1000px;"} ) do
		play

-# http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#event-media-emptied
- if( _.includeOnce? )
	:javascript

		ABoo.AudioPlayerState = SC.Object.extend({

			_loadingController: undefined,
			_playingController: undefined,
			_controller:undefined,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply( this, arguments );

				//set on init - this._controller = controller;

				var loadingStateMachine_config = {
					"states": [
						"st_empty",
						"st_stalled",
						"st_loading",
						"st_loaded",
						"st_resetting",
						"st_error"
					],

					"events": [
						"ev_error",
						"ev_reset",
						"ev_load",
						"ev_loadComplete",
						"ev_resetComplete",
						"ev_stall"
					],

					"commands": [
						"cmd_showEmptyLoader",
						"cmd_showStalledLoader",
						"cmd_showLoadingLoader",
						"cmd_showFinishedLoader",
						"cmd_showResettingLoader",
						"cmd_showErrorLoader"
					],

					"transitions": [
						{"state": "st_empty", "event": "ev_load", "nextState": "st_loading"},

						{"state": "st_loading", "event": "ev_stall", "nextState": "st_stalled"},
						{"state": "st_loading", "event": "ev_error", "nextState": "st_error"},
						{"state": "st_loading", "event": "ev_loadComplete", "nextState": "st_loaded"},
						{"state": "st_loading", "event": "ev_reset", "nextState": "st_resetting"},

						{"state": "st_stalled", "event": "ev_load", "nextState": "st_loading"},
						{"state": "st_stalled", "event": "ev_error", "nextState": "st_error"},
						{"state": "st_stalled", "event": "ev_reset", "nextState": "st_resetting"},

						{"state": "st_loaded", "event": "ev_reset", "nextState": "st_resetting"},
						{"state": "st_empty", "event": "ev_reset", "nextState": "st_resetting"},
						{"state": "st_error", "event": "ev_reset", "nextState": "st_resetting"},
						{"state": "st_resetting", "event": "ev_resetComplete", "nextState": "st_empty"}
					],

					"actions": [
						{"state": "st_empty", "entryAction": "cmd_showEmptyLoader", "exitAction": null },
						{"state": "st_stalled", "entryAction": "cmd_showStalledLoader", "exitAction": null },
						{"state": "st_loading", "entryAction": "cmd_showLoadingLoader", "exitAction": null },
						{"state": "st_loaded", "entryAction": "cmd_showFinishedLoader", "exitAction": null },
						{"state": "st_resetting", "entryAction": "cmd_showResettingLoader", "exitAction": null },
						{"state": "st_error", "entryAction": "cmd_showErrorLoader", "exitAction": null }
					]
				};

				var playingStateMachine_config = {
					"states": [
						"st_empty",
						"st_stopped",
						"st_waiting",
						"st_playing",
						"st_finished",
						"st_error"
					],

					"events": [
						"ev_canPlay",
						"ev_play",
						"ev_timeupdate",
						"ev_wait",
						"ev_stop",
						"ev_ended",
						"ev_error",
						"ev_reset"
					],

					"commands": [
						"cmd_showEmptyPlayer",
						"cmd_showStoppedPlayer",
						"cmd_showWaitingPlayer",
						"cmd_hideWaitingPlayer",
						"cmd_showPlayingPlayer",
						"cmd_showFinishedPlayer",
						"cmd_showErrorPlayer"
					],

					"transitions": [
						{"state": "st_empty", "event": "ev_canPlay", "nextState": "st_stopped"},
						{"state": "st_empty", "event": "ev_error", "nextState": "st_error"},
						{"state": "st_empty", "event": "ev_play", "nextState": "st_playing"},

						{"state": "st_stopped", "event": "ev_play", "nextState": "st_playing"},
						{"state": "st_stopped", "event": "ev_error", "nextState": "st_error"},
						{"state": "st_stopped", "event": "ev_reset", "nextState": "st_empty"},

						{"state": "st_playing", "event": "ev_error", "nextState": "st_error"},
						{"state": "st_playing", "event": "ev_stop", "nextState": "st_stopped"},
						{"state": "st_playing", "event": "ev_reset", "nextState": "st_empty"},
						{"state": "st_playing", "event": "ev_wait", "nextState": "st_waiting"},
						{"state": "st_playing", "event": "ev_ended", "nextState": "st_finished"},

						{"state": "st_waiting", "event": "ev_error", "nextState": "st_error"},
						{"state": "st_waiting", "event": "ev_stop", "nextState": "st_stopped"},
						{"state": "st_waiting", "event": "ev_timeupdate", "nextState": "st_playing"},
						{"state": "st_waiting", "event": "ev_reset", "nextState": "st_empty"},

						{"state": "st_finished", "event": "ev_stop", "nextState": "st_stopped"},
						{"state": "st_error", "event": "ev_reset", "nextState": "st_empty"}
					],

					"actions": [
						{"state": "st_empty", "entryAction": "cmd_showEmptyPlayer", "exitAction": null },
						{"state": "st_stopped", "entryAction": "cmd_showStoppedPlayer", "exitAction": null },
						{"state": "st_waiting", "entryAction": "cmd_showWaitingPlayer", "exitAction": "cmd_hideWaitingPlayer" },
						{"state": "st_playing", "entryAction": "cmd_showPlayingPlayer", "exitAction": null },
						{"state": "st_finished", "entryAction": "cmd_showFinishedPlayer", "exitAction": null },
						{"state": "st_error", "entryAction": "cmd_showErrorPlayer", "exitAction": null }
					]
				};

				var loadingStateMachineParser = ABoo.HooStateMachineConfigurator.create({config: loadingStateMachine_config});
				var loadingStateMachine = ABoo.HooStateMachine.create( {startState: loadingStateMachineParser.state("st_empty") } );
				this._loadingController = ABoo.HooStateMachine_controller.create( { currentState: loadingStateMachineParser.state("st_empty"), machine: loadingStateMachine, commandsChannel: this } );

				var playingStateMachineParser = ABoo.HooStateMachineConfigurator.create({config: playingStateMachine_config});
				var playingStateMachine = ABoo.HooStateMachine.create( {startState: playingStateMachineParser.state("st_empty")} );
				this._playingController = ABoo.HooStateMachine_controller.create( { currentState: playingStateMachineParser.state("st_empty"), machine: playingStateMachine, commandsChannel: this } );
			},

			 send: function( command ) {
			 	var func = this._controller[command.name];
			 	if(func) {
					func.call(this._controller);
				} else {
					console.log("Didnt find function "+command.name);
				}

				// tHere is one 'special' case
				if(command.name=="showResettingLoaderCmd") {
					// -- this has to manually trigger complete
					this._loadingController.handle( "resetComplete" );
				}
			},

			processInputSignal: function( signal ) {
				// console.log("Incoming >> "+signal );
				switch( signal ){
					case "ready":
						this._controller.ready();
						break;

					// not really sure of the purpose of abort
					case "abort":
						break;

					case "error":
					case "dataunavailable":
					case "empty":
						this._loadingController.handle( "error" );
						this._playingController.handle( "error" );
						break;

					case "stalled":
						this._loadingController.handle( "stall" );
						break;

					case "waiting":
						this._playingController.handle( "wait" );
						break;

					case "loadstart":
					case "loadedmetadata":
						this._loadingController.handle( "load" );
						break;
					case "durationchange":
						this._loadingController.handle( "load" );
						this._controller.durationchange();
						break;
					case "progress":
						this._loadingController.handle( "load" );
						this._controller.progressupdate();
						break;

					case "canplay":
					case "canplaythrough":
						this._loadingController.handle( "load" );
						this._playingController.handle( "canPlay" );
						break;

					case "loadeddata":
						this._loadingController.handle( "loadComplete" );
						break;

					case "emptied":
						this._loadingController.handle( "reset" );
						this._playingController.handle( "reset" );
						break;

					case "timeupdate":
						this._playingController.handle( "timeupdate" );
						this._controller.timeupdate();
						break;

					case "play":
						this._playingController.handle( "play" );
						break;

					case "ended":
						this._playingController.handle( "ended" );
						break;

					case "pause":
						this._playingController.handle( "stop" );
						break;

					default:
						throw("** Unknown Signal ** -"+signal);
				}
			}
		});

		/*
		 *
		*/
		ABoo.AbstractPlayerBackend = SC.Object.extend({

			_observablePlayer: undefined,
			_commandablePlayer: undefined,
			ready:				undefined,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);
				this.ready = false;
			},

			play: function(callback) {
				this._commandablePlayer.setAttribute( 'autoplay', true );
				this._commandablePlayer.play();
			},

			src: function() {
				return this._commandablePlayer.getAttribute( 'src' );
			},

			setSrc: function( url ) {
				if (!url) debugger;
				this._commandablePlayer.setAttribute( 'src', url );
				// this._commandablePlayer.type = 'audio/mpeg';
				// this._commandablePlayer.preload = "auto";
				this._commandablePlayer.load(); // force the audio to reset & start loading the new url
			},

			duration: function() {
			  	return this._commandablePlayer.getNodeProperty('duration');
			},

			setCurrentTime: function(value) {
				this._commandablePlayer.setNodeProperty( 'currentTime', value );
			},

			// alert(video.networkState == video.NETWORK_EMPTY); // true
			buffered: function() {

			  	var timeRanges = this._commandablePlayer.getNodeProperty('buffered');
			  	if(!timeRanges){
			  		console.log("Buffered attribute NOT found");
			  		return 0;
			  	}
			  	var endTime = 0;

			  	if( timeRanges.length )
				try {
					// Discount the possibility of multiple buffers for now (theoretically possible with range requests if the user skips forward, but Safari doesn't seem to support it)
					// and just return the proportion of buffered time
					var timeRangeIndex = timeRanges.length-1;
					endTime = this._getTimeRangeEnd( timeRanges, timeRangeIndex ); // implemented differently for flash and html5
				} catch(err) {
					alert(err);
					return 0;
				}
				return endTime;
			}
		});

		/*
		 *
		*/
		ABoo.FlashPlayerBackend = ABoo.AbstractPlayerBackend.extend({

			_swfSrc: 		'http://0.0.0.0:3000/flash/HeadlessPlayer/lib/Debug/HeadlessPlayer.swf',
			_embeddedSwf:	undefined,
			type:			"Flash",

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);
				FlashPlayerBackend.sharedInstance = this;
			},

			// Stick the swf at the end of the page
			_attachToPage: function() {

				var $wrapper = $("<div class='booPlayerHolder'/>").appendTo(document.body);
				if( !HeadlessPlayerSingleton.FlashPlayerId )
					HeadlessPlayerSingleton.FlashPlayerId = 0;
				HeadlessPlayerSingleton.FlashPlayerId++;
				var playerId = "booPlayer"+HeadlessPlayerSingleton.FlashPlayerId;

				var attemptSillyCacheFoil = YES;
				var foilString = attemptSillyCacheFoil ? "?"+encodeURIComponent(new Date().toUTCString()) : "";

				// IE doesn't like you playing with <object>s once they're created, hence the huge string blob & using innerHTML
				var objectTag = "<object data='"+this._swfSrc+foilString+"' id='"+playerId+"' type='application/x-shockwave-flash' width=50 height=50>"+
				 "<param name='movie' value='"+this._swfSrc+"'/><param name='allowScriptAccess' value='always'/><param name='FlashVars' value='rootID="+playerId+"'/></object>";
				if($.browser.msie)
					$wrapper[0].innerHTML = objectTag;
				else
					$wrapper.append(objectTag);
				this._embeddedSwf = $wrapper.find('object')[0];

				this._observablePlayer = $wrapper;
				this._commandablePlayer = this._embeddedSwf;

				// Hack in some utility functions to make sure audio element has the same interface as the swf
				this._commandablePlayer.getNodeProperty = function(propertyName){ return this[propertyName](); };
				this._commandablePlayer.setNodeProperty = function(propertyName,value){ this['set'+propertyName](value); };

				var self = this;
				$wrapper.bind('ready', function(){ self.set('ready', YES); })
			},

			_getTimeRangeEnd: function( timeRanges, timeRangeIndex ) {
				return timeRanges[timeRangeIndex][1];
			}
		});


		ABoo.HTMLPlayerBackend = ABoo.AbstractPlayerBackend.extend({

			type:				"HTML5",
			_audioElement:		undefined,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);
				this.ready = false;
			},

			// stick the audio element at the end of the page
			_attachToPage: function() {
				var audioElem = document.createElement('audio');
				var $wrapper = $("<div class='booPlayerHolder'/>").appendTo(document.body);
			  	$wrapper.append(audioElem);
				this.ready = true;				/* html5 was born ready */
			  	this._audioElement = audioElem;

				// in flash the object i observe is different than the object we command, hence this
				this._observablePlayer = this._audioElement;
				this._commandablePlayer = this._audioElement;

				// Hack in some utility functions to make sure audio element has the same interface as the swf
				this._commandablePlayer.getNodeProperty = function(propertyName){ return this[propertyName] };
				this._commandablePlayer.setNodeProperty = function(propertyName,value){ this[propertyName]=value };
			},

			_getTimeRangeEnd: function( timeRanges, timeRangeIndex ) {
				timeRanges.end(timeRangeIndex);
			}

		});


		/*
		 * we attach one swf/audio element to the page
		*/
		ABoo.HeadlessPlayerSingleton = SC.Object.extend({

			_playerBackend: undefined,	// flash or HTML5
			_activePlayer: undefined,	// the current instance using the singleton
			_stateMachine: undefined,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);
				this.stateMachine = ABoo.AudioPlayerState.create( {_controller: this} );
				this._attachFlashOrHtml5AudioPlayerToPage();
			},

			_attachFlashOrHtml5AudioPlayerToPage: function() {

				var browserHasNativeMp3Support = browserCanPlayNativeMP3();
				var browserHasFlash = hasMinimumFlash();

				var shouldUseFlashInSafari = NO;
				if(shouldUseFlashInSafari)
					isSafari = browserIsSafari();
				else
					isSafari = false;

				var useNativePlayback = browserHasNativeMp3Support && !isSafari;
				// flash may be blocked, but we still report that we have it
				if( !useNativePlayback && !browserHasFlash )
					throw("boo.oldflasherror");

				this._playerBackend = useNativePlayback ? ABoo.HTMLPlayerBackend.create() : ABoo.FlashPlayerBackend.create();
				this._playerBackend._attachToPage();

				/* obviously temporary - get it to work with html player first */
				this._createObservervations();
			},

			whenReady: function( target, callBack ) {

				if(this._playerBackend.ready) {
					callBack.apply(target);
				} else {
					console.log("not already ready "+ target);
					this._playerBackend.addObserver( 'ready', target, callBack );// !grr kinda leaking this
				}
			},

			_createObservervations: function(){

				/*
				 * Example sequences of events
				 * (bare in mind that this was done with local mp3 files, which is broken)
				 */

			  	// chrome
			  	// emptied, loadstart, play, waiting, error
			  	// emptied, loadstart, play, waiting, durationchange, loadedmetadata, timeupdate, loadeddata, canplay, canplaythru, timeupdate, timeupdate, ended

			  	// Safari
			  	// loadstart, play, waiting, timeupdate, error
			  	// loadstart, play, waiting, durationchange, loadedmetadata, loadeddata, canplay, canplaythrough, timeupdate, ended
				// NB, safari doesn't send an emptied event if we swap out the url

				// Firefox
				// -- -- -- -- -- -- -- --
				// TODO

				// FlashPlayer
				// -- -- -- -- -- -- -- --
				// TODO

			  	// http://www.w3schools.com/html5/html5_ref_eventattributes.asp
			  	// https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox
			  	var self = this;
				var $actualPlayer = $(this._playerBackend._observablePlayer);

				var watchableEvents = 'error emptied loadstart progress loadeddata loadedmetadata durationchange timeupdate canplay canplaythrough waiting play ended abort dataunavailable empty pause ratechange seeked seeking volumechange stalled';
				$actualPlayer.bind( watchableEvents, function( e ) {
					self.handlePlayerEvent(e.type);
				});
			},

			reset: function() {
			},

			playerBecameCurrent: function( playerInstance ) {
				if(playerInstance!=this._activePlayer){
					this.reset();
					this.set('_activePlayer', playerInstance);
					this.stateMachine._controller = playerInstance._controller;
				}
			},

			handlePlayerEvent: function( eventName ) {
				this.stateMachine.processInputSignal( eventName );
			},

			play: function( mp3Url ) {
				if( mp3Url!=this._playerBackend.src ) {
					this._playerBackend.setSrc(mp3Url); // wait? for async callback?
				}
				this._playerBackend.play();


				// DEBUG
				// DEBUG
				// DEBUG THING TO FAKE EVENTS
				// temp time test
				var self = this;
				var timerID = window.setTimeout( function(){
					// self._playerBackend.setCurrentTime(0);
					// self._playerBackend.setSrc("http://audioboo.fm/boos/305019-taking-frank-to-the-vet.mp3");
				 }, 4000);
			}
		});


		/*
		 * We can create an instance of this for each audio clip
		 * We need to bind the spinners and progress to this, not the singleton
		 * If we had 100 in a page when would we set up bindings?
		*/
		ABoo.HeadlessAudioplayer = ABoo.HooWidget.extend({

			_controller:	undefined,

			_src:			undefined,	// 2 players on the page with the same audioUrl could potentially cause a problem
			ready:			undefined,
			_flashTimeout:	undefined,
			_playCount:		undefined,

			init: function( /* init never has args */ ) {

				arguments.callee.base.apply(this,arguments);
				this.ready = false;
				this.loadedSeconds = false;
				this._playCount = 0;
				var self = this;
				HeadlessAudioplayer.players.push(this);

				if( HeadlessAudioplayer.sharedHeadlessPlayer==undefined ){
					try {
						HeadlessAudioplayer.sharedHeadlessPlayer = ABoo.HeadlessPlayerSingleton.create();
					} catch(err) {
			 			 $(this).trigger('booError', err);
			  			alert("NO! "+err);
			  			return;
			  		}
				}

				if( this.json.mp3Url ) {
					this._src = this.json.mp3Url;

					// incase we fail to become ready
					this._flashTimeout = setTimeout( function(){
						self.didBecomeReadyTimeOut.apply(self);
					}, 1000);

					HeadlessAudioplayer.sharedHeadlessPlayer.whenReady( this, this.didBecomeReady );
				}
			},

			// we should be observing this
			didBecomeReady: function( target, event, timeOutInstance ){

				clearTimeout( this._flashTimeout );
				this.set( "ready", YES );
			},

			didBecomeReadyTimeOut: function(){
				//alert("Flash loading timed out");
				// replace each play button with a flash instance?
			},

			play: function(){
				//TODO: Where do we check that the mp3 exits?
				HeadlessAudioplayer.sharedHeadlessPlayer.playerBecameCurrent(this);
				HeadlessAudioplayer.sharedHeadlessPlayer.play( this._src );
				this._playCount++;
			},

			// Here is a custom accessor! yay
			type: function( propKey, setterVal ) {
				if(setterVal==undefined) // getter
					return HeadlessAudioplayer.sharedHeadlessPlayer._playerBackend.type;
				else {
					// setter
				}
				return "wrong!";
			}.property()

		});
		HeadlessAudioplayer.players = new Array();	// Class variable

		/* UTILITY */

		// make this a class method! on HeadlessAudioplayer
		// woah trigger() is fucking cool man
		// we should definitely, like, use it
		function printPlayerInfos() {
			if(HeadlessAudioplayer.sharedHeadlessPlayer===undefined) {
				console.log("No players");
				return;
			}

			$.each( HeadlessAudioplayer.players, function( player_index, player_value ){
				player_value.set('type', "shit");
				console.log( "Player "+player_value+" :type "+player_value.get('type')+
					", url "+player_value._src+
					", playCount "+player_value._playCount
				);
			});
		}
