- push( hoo_canvas )

-# http://0.0.0.0:3000/widgets/canvas

// Add Sprites to the canvas
%div[_]{ :data=> {'jsclass'=>'HooCanvas'} }
	%canvas( width="1" height="1" )
	= insert( _.views, "" )

- if( _.includeOnce? )
	:javascript

		HooCanvas = HooWidget.extend({

			_$canvas: undefined,
			_subViews: undefined,
			_isDirty: false,
			_isActive: false,
			_lastDirtyTime: false,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);
				this._$canvas = this.getFirstDomItemOfType("canvas");
				HOO_nameSpace.assert( this._$canvas );
				this._subViews = new Array();
			},

			setSize: function( width, height ) {

				if( width!=this.width() || height!=this.height() ) {
					this._$canvas.attr({ width:width, height:height }); // setting the size resets the canvas
					this.setNeedsDisplay();
				}
			},

			ctx: function() {
				var ctx = this._$canvas[0].getContext('2d');
				return ctx;
			},

			width: function() {
				var a = this._$canvas.width();
				var b = this._$canvas.outerWidth();
				HOO_nameSpace.assert( a==b, "what really????");
				return a;
			},

			height: function() {
				var a = this._$canvas.height();
				var b = this._$canvas.outerHeight();
				HOO_nameSpace.assert( a==b, "what really????");
				return a;
			},

			setNeedsDisplay: function() {
				this._isDirty = true;
				this._lastDirtyTime = (new Date()).getTime();
				if(!this._isActive) {
					ShiteDisplayLink.sharedDisplayLink.registerCanvas(this);
					this._isActive = true;
				}
			},

			addSubview: function( child ) {
				this._subViews.push( child );
				child._parentCanvas = this;
				//this.setNeedsDisplay();
			},

			removeSubview: function( child ) {
				var i = this._subViews.indexOf(child);
				if(i>-1) {
					this._subViews.splice(i,1);
					child._canvas = null;
				}
				if(this._subViews.length==0 && this._isActive) {
					ShiteDisplayLink.sharedDisplayLink.unregisterCanvas(this);
					this._isActive = false;
				}
			},

			displayUpdate: function( time ) {
				if( this._isDirty ) {
					$.each( this._subViews, function(indexInArray, valueOfElement){
						valueOfElement.drawInRect( time );
					});
					this._isDirty = false;
				} else {
					var timeSince = time - this._lastDirtyTime;
					if( timeSince > 3000 ) {
						ShiteDisplayLink.sharedDisplayLink.unregisterCanvas(this);
						this._isActive = false;
					}
				}
			}
		});
