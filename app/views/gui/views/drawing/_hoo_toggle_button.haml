-# View should be logicless
-# No Dimensions in CSS
-# If you don't have Javascript you dont need rollovers
-# Javascript-less site should be minimal and semantic

- push( hoo_toggle_button )

-# adding the data-jsclass attribute means that a javascript instance will be created
%div[_]( data-jsclass='HooToggleButton' )
	= form_tag( "#{_.action}", :method=>:post, :remote=>true ) do

		-# Old way used a submit button. Thee are a bitch to style. So is this.
		-# Note, the position of the span is different in ie, firefox and safari (didnt even bother to check chrome)
		-# If you center it in safari it will be to low in firefox, whichever way you tweak it it will be incorrect somewhere
		-# We really should use links and javascript

		- textStyle = "font:13px Verdana; color:#{_.labelColor}; line-height:15px; padding:0 0 0 15px; position:relative; top:0px; margin:0!important; letter-spacing:0pc; word-spacing:-0.1pc;"
		- button_attrs = { :style=>"margin: 0 0 0 0; border: none; background-color:transparent; background: url( #{_.img} ) 0 #{_.size[1]*-_.state}px; width: #{_.size[0]}px; height: #{_.size[1]}px;", :name=>"commit", :title=>"", :type=>"submit", :value=>"" }
		- if(  _.state==0 )
			- button_attrs.merge!( { :disabled=>"disabled" } )
			- button_attrs[:style] += "pointer-events:none;"
			- textStyle += "opacity:0.6;"
		- else
			- textStyle += "text-shadow:0px -1px 0px #374683;"

		%button{ button_attrs }
			%span( style="#{textStyle}" )
				-# Insert the correct label for this state
				#{_.labelStates[_.state]}


:javascript
	#{_.varName}_json = #{_.jsonProperties}

- if( _.includeOnce? )

	:javascript

		// Lets kick off state machine tests
		$(document).ready(function()
		{
			// She has a secret compartment in her bedroom that is normally locked and concealed.
			// To open it, she has to close the door, then open the second drawer in her chest and turn her bedside light onâ€”in either order.
			// Once these are done, the secret panel is unlocked for her to open.
			// The controller Communicates with devices by receiving event messages and sending command messages.
			// These are both four-letter codes sent through the communication channels.

			var doorClosed_event		= HooStateMachine_event.create( {name: "doorClosed"} );
			var drawerOpened_event		= HooStateMachine_event.create( {name: "drawerOpened"} );
			var lightOn_event			= HooStateMachine_event.create( {name: "lightOn"} );
			var doorOpened_event		= HooStateMachine_event.create( {name: "doorOpened"} );
			var panelClosed_event		= HooStateMachine_event.create( {name: "panelClosed"} );

			var unlockPanelCmd 			= HooStateMachine_command.create( {name: "unlockPanel"} );
			var lockPanelCmd 			= HooStateMachine_command.create( {name: "lockPanel"} );
			var lockDoorCmd 			= HooStateMachine_command.create( {name: "lockDoor"} );
			var unlockDoorCmd 			= HooStateMachine_command.create( {name: "unlockDoor"} );

			var idle_state				= HooStateMachine_state.create( {name: "idle" });
			var active_state			= HooStateMachine_state.create( {name: "active" });
			var waitingForLight_state	= HooStateMachine_state.create( {name: "waitingForLight" });
			var waitingForDrawer_state	= HooStateMachine_state.create( {name: "waitingForDrawer" });
			var unlockedPanel_state		= HooStateMachine_state.create( {name: "unlockedPanel" });

			var stateMachineInstance = HooStateMachine.create( {startState: idle_state} );

			idle_state.addTransition( doorClosed_event, active_state );
			idle_state.addAction( unlockDoorCmd );
			idle_state.addAction( lockPanelCmd );

			active_state.addTransition( drawerOpened_event, waitingForLight_state );
			active_state.addTransition( lightOn_event, waitingForDrawer_state );

			waitingForLight_state.addTransition( lightOn_event, unlockedPanel_state );

			waitingForDrawer_state.addTransition( drawerOpened_event, unlockedPanel_state );

			unlockedPanel_state.addAction( unlockPanelCmd );
			unlockedPanel_state.addAction( lockDoorCmd );
			unlockedPanel_state.addTransition( panelClosed_event, idle_state );

			var resetEvents = new Array();
			resetEvents.push( doorOpened_event );
			stateMachineInstance.addResetEvents( resetEvents );

			var testReciever = HooStateMachine_testCommandChannel.create();
			var controller = HooStateMachine_controller.create( { currentState: idle_state, machine: stateMachineInstance, commandsChannel: testReciever } );

			controller.handle( "doorClosed" );
			controller.handle( "drawerOpened" );
			controller.handle( "lightOn" );
		});



		/* S T A T E   M A C H I N E */

		HooStateMachine_testCommandChannel = SC.Object.extend({

			send: function( command ) {
				alert( command.name );
			}
		});

		HooStateMachine_abstractEvent = SC.Object.extend({
			name: undefined,
		});

		HooStateMachine_command = HooStateMachine_abstractEvent.extend({
		});

		HooStateMachine_event = HooStateMachine_abstractEvent.extend({
		});

		HooStateMachine_state = SC.Object.extend({

			name: undefined,
			actions: undefined,
			transitions: undefined,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply( this, arguments );
				this.actions = new Array();
				this.transitions = new Object();
			},

			addTransition: function( event, targetState ) {
				if( targetState==null || event==null )
					alert("Error: invalid params for HooStateMachine_state");
				var t = HooStateMachine_transition.create( {source:this, trigger:event, target:targetState} );
				this.transitions[event.name] = t;
			},

			addAction: function( cmd ) {
				this.actions.push(cmd);
			},

			getAllTargets: function() {
				var result = new Array();
				$.each( transitions, function(index, value) {
					alert(index + ': ' + value);
					result.push( value.target );
				});
				return result;
			},

			hasTransition: function( eventName ) {
				return this.transitions.hasOwnProperty( eventName );
			},

			targetState: function( eventName ) {
				return this.transitions[eventName].target;
			},

			executeActions: function( commandsChannel ) {

				$.each( this.actions, function(index, value) {
			 		commandsChannel.send( value );
				});
			},

		});

		HooStateMachine_transition = SC.Object.extend({

			source: undefined,
			trigger: undefined,
			target: undefined,

			getEventName: function() {
				return this.trigger.name;
			},
		});


		HooStateMachine = SC.Object.extend({

			startState: undefined,
			resetEvents: undefined,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply( this, arguments );
				this.resetEvents = new Array();
			},

			getStates: function() {
				var result = new Array();
				this.collectStates( result, startState );
				return result;
			},

			// private
			collectStates: function( result, s ) {
				if( $.inArray(s, result) )
					return;
				result.push(s);
				var allTargets = s.getAllTargets();
				$.each( allTargets, function(index, value) {
					collectStates(result, value);
				});
			},

			addResetEvents: function( events ) {
				var self = this;
				$.each( events, function(index, value) {
					self.resetEvents.push(value);
				});
			},

			isResetEvent: function( eventName ) {
				return this.resetEventNames().hasOwnProperty( eventName );
			},

			resetEventNames: function() {
				var result = new Array();
				$.each( this.resetEvents, function(index, value) {
					result.push( value.name );
				});
				return result;
			}
		});

		/*
		 * Communicates with devices by receiving event messages and sending command messages.
		 * These are both four-letter codes sent through the communication channels.
		*/
		HooStateMachine_controller = SC.Object.extend({

			currentState: undefined,
			machine: undefined,
			commandsChannel: undefined,

			handle: function( eventName ) {

				if( this.currentState.hasTransition(eventName) )
					this.transitionTo( this.currentState.targetState(eventName) );

				else if( this.machine.isResetEvent(eventName) )
					this.transitionTo( this.machine.startState );

				// ignore unknown events
				else {
					alert("unknown event "+eventName );
				}
			},

			// private
			transitionTo: function( targetState ) {
				 this.currentState = targetState;
				 targetState.executeActions( this.commandsChannel );
			 },
		});


		/* S T A T E  M A C H I N E */




		/*
		 * This is the prototype class for an instance that should be automatically created on
		 * page load because it was tagged with a jsclass attribute server side.
		 * set these values in Create( hash )
		*/
		HooWidget = SC.Object.extend({
			json: "undefined",
			id: "undefined",
		});

		/* Clickable */
		HooClickable = HooWidget.extend({
		});

		/* Toggle Button */
		HooToggleButton = HooWidget.extend({

			isMouseDown: false,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);
				if(this.json.state>0)
					this.setupBindings();
			},

			// forward events to 'this'
			eventTrampoline: function(e) {
				var target = e.data.target;
				var action = e.data.action;
				target[action](e);
			},

			setupBindings: function() {
				this.enable();
			},

			//toggleButtonState: function() {
			//	this.setButtonText( "Fuck you" );
			//	this.positionBackground();
			//},

			wasClicked: function() {
				this.disable();
			},

			actionComplete: function() {
				this.enable();
			},

			enable: function() {
				// Reliable mouse tracker is more difficult than it should be.
				// need hover, mouse enter, mouse leave, if mouse is still down tho and we move back over the button it needs to go down again
				// Never used MacroMind JQuery people?
				this.getForm().submit( {ob: this}, this.onClick );
				this.getButton().bind( 'mousedown', {target:this, action:'mouseDown' }, this.eventTrampoline );

				// -- error check the adding and removing of bindings --
				// ...
				this.getButton().removeAttr("disabled");
				this.getButton().css( "pointer-events", "auto" );

				var mouseDownText = this.json.labelStates[this.json.state];
				this.setButtonText( mouseDownText );
			},

			disable: function() {
				this.getForm().unbind( "submit", this.onClick );
				this.getButton().unbind( "mousedown", this.mouseDown );

				this.getButton().attr('disabled', 'disabled');
				this.getButton().css( "pointer-events", "none" );

				var mouseDownText = this.json.labelStates[0];
				this.setButtonText( mouseDownText );
			},

			positionBackground:function() {
				var $butt = this.getButton();
				$butt.css( "backgroundPosition", "0px "+45+"px" );
			},

			setButtonText: function( arg ) {
				var $butt = this.getButton();
				var $contents = $butt.find("span");
				$contents.text( arg );
			},

			getForm: function() {
				var formQuery = "#"+this.id+" form:first";
				var $form = $( formQuery );
				if( $form.length!=1 )
					console.error("Could not find the form");
				return $form;
			},

			getButton: function() {
				var buttonQuery = "#"+this.id+" button:first";
				var $button = $( buttonQuery );
				if( $button.length!=1 )
					console.error("Could not find the Button");
				return $button;
			},

			mouseDown: function( e ) {

				var target = e.data.ob;
				var mouseDownText = target.json.labelStates[target.json.state+1];
				target.setButtonText( mouseDownText );

				target.getButton().bind( 'mouseleave', {ob: target}, target.mouseLeave );
				$(document).bind( 'mouseup', {ob: target}, target.mouseUp );
			},

			mouseUp: function( e ) {

				var target = e.data.ob;
				target.getButton().unbind( "mouseup", target.mouseUp );
				target.getButton().unbind( "mouseleave", target.mouseLeave );
			},

			mouseEnter: function( e ) {

				var target = e.data.ob;
				target.getButton().unbind( "mouseenter", target.mouseEnter );
				target.getButton().bind( 'mouseleave', {ob: target}, target.mouseLeave );

				var mouseDownText = e.data.ob.json.labelStates[e.data.ob.json.state+1];
				e.data.ob.setButtonText( mouseDownText );
			},

			mouseLeave: function( e ) {

				var target = e.data.ob;
				target.getButton().unbind( "mouseleave", target.mouseLeave );
				target.getButton().bind( 'mouseenter', {ob: target}, target.mouseEnter );

				// -- ok, mouse may be still be down
				var mouseDownText = e.data.ob.json.labelStates[e.data.ob.json.state];
				e.data.ob.setButtonText( mouseDownText );
			},

			onClick: function( e ) {

				// ensure we can't click again until we have received response
				e.data.ob.wasClicked();

				$.ajax({ url: this.action, type: 'POST', data: $(this).serialize(),
					success: function(data) {
						// alert(  e.data.ob+" muthafucking "+data.result );
						e.data.ob.actionComplete();
					}
				});
			    return e.preventDefault();
			},
		});
