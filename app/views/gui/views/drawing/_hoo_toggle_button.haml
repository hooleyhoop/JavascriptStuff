-# View should be logicless
-# No Dimensions in CSS
-# If you don't have Javascript you dont need rollovers
-# Javascript-less site should be minimal and semantic

- push( hoo_toggle_button )

-# adding the data-jsclass attribute means that a javascript instance will be created
%div[_]( data-jsclass='HooToggleButton' )
	= form_tag( "#{_.action}", :method=>:post, :remote=>true ) do

		-# Old way used a submit button. Thee are a bitch to style. So is this.
		-# Note, the position of the span is different in ie, firefox and safari (didnt even bother to check chrome)
		-# If you center it in safari it will be to low in firefox, whichever way you tweak it it will be incorrect somewhere
		-# We really should use links and javascript

		- textStyle = "font:13px Verdana; color:#{_.labelColor}; line-height:15px; padding:0 0 0 15px; position:relative; top:0px; margin:0!important; letter-spacing:0pc; word-spacing:-0.1pc;"
		- button_attrs = { :style=>"margin: 0 0 0 0; border: none; background-color:transparent; background: url( #{_.img} ) 0 #{_.size[1]*-_.state}px; width: #{_.size[0]}px; height: #{_.size[1]}px;", :name=>"commit", :title=>"", :type=>"submit", :value=>"" }
		- if(  _.state==0 )
			- button_attrs.merge!( { :disabled=>"disabled" } )
			- button_attrs[:style] += "pointer-events:none;"
			- textStyle += "opacity:0.6;"
		- else
			- textStyle += "text-shadow:0px -1px 0px #374683;"

		%button{ button_attrs }
			%span( style="#{textStyle}" )
				-# Insert the correct label for this state
				#{_.labelStates[_.state]}


:javascript
	#{_.varName}_json = #{_.jsonProperties}

- if( _.includeOnce? )

	:javascript

		/* set these values in Create( hash ) */
		HooWidget = SC.Object.extend({
			json: "undefined",
			id: "undefined",
		});

		HooToggleButton = HooWidget.extend({

			isMouseDown: false,

			init: function() {
				arguments.callee.base.apply(this,arguments);
				if(this.json.state>0)
					this.setupBindings();
			},

			// forward events to 'this'
			eventTrampoline: function(e) {
				var target = e.data.target;
				var action = e.data.action;
				target[action](e);
			},

			setupBindings: function() {
				this.enable();
			},

			//toggleButtonState: function() {
			//	this.setButtonText( "Fuck you" );
			//	this.positionBackground();
			//},

			wasClicked: function() {
				this.disable();
			},

			actionComplete: function() {
				this.enable();
			},

			enable: function() {
				// Reliable mouse tracker is more difficult than it should be.
				// need hover, mouse enter, mouse leave, if mouse is still down tho and we move back over the button it needs to go down again
				// Never used MacroMind JQuery people?
				this.getForm().submit( {ob: this}, this.onClick );
				this.getButton().bind( 'mousedown', {target:this, action:'mouseDown' }, this.eventTrampoline );

-- error check the adding and removing of bindings --
...
				this.getButton().removeAttr("disabled");
				this.getButton().css( "pointer-events", "auto" );

				var mouseDownText = this.json.labelStates[this.json.state];
				this.setButtonText( mouseDownText );
			},

			disable: function() {
				this.getForm().unbind( "submit", this.onClick );
				this.getButton().unbind( "mousedown", this.mouseDown );

				this.getButton().attr('disabled', 'disabled');
				this.getButton().css( "pointer-events", "none" );

				var mouseDownText = this.json.labelStates[0];
				this.setButtonText( mouseDownText );
			},

			positionBackground:function() {
				var $butt = this.getButton();
				$butt.css( "backgroundPosition", "0px "+45+"px" );
			},

			setButtonText: function( arg ) {
				var $butt = this.getButton();
				var $contents = $butt.find("span");
				$contents.text( arg );
			},

			getForm: function() {
				var formQuery = "#"+this.id+" form:first";
				var $form = $( formQuery );
				if( $form.length!=1 )
					console.error("Could not find the form");
				return $form;
			},

			getButton: function() {
				var buttonQuery = "#"+this.id+" button:first";
				var $button = $( buttonQuery );
				if( $button.length!=1 )
					console.error("Could not find the Button");
				return $button;
			},

			mouseDown: function( e ) {

				var target = e.data.ob;
				var mouseDownText = target.json.labelStates[target.json.state+1];
				target.setButtonText( mouseDownText );

				target.getButton().bind( 'mouseleave', {ob: target}, target.mouseLeave );
				$(document).bind( 'mouseup', {ob: target}, target.mouseUp );
			},

			mouseUp: function( e ) {

				var target = e.data.ob;
				target.getButton().unbind( "mouseup", target.mouseUp );
				target.getButton().unbind( "mouseleave", target.mouseLeave );
			},

			mouseEnter: function( e ) {

				var target = e.data.ob;
				target.getButton().unbind( "mouseenter", target.mouseEnter );
				target.getButton().bind( 'mouseleave', {ob: target}, target.mouseLeave );

				var mouseDownText = e.data.ob.json.labelStates[e.data.ob.json.state+1];
				e.data.ob.setButtonText( mouseDownText );
			},

			mouseLeave: function( e ) {

				var target = e.data.ob;
				target.getButton().unbind( "mouseleave", target.mouseLeave );
				target.getButton().bind( 'mouseenter', {ob: target}, target.mouseEnter );

				// -- ok, mouse may be still be down
				var mouseDownText = e.data.ob.json.labelStates[e.data.ob.json.state];
				e.data.ob.setButtonText( mouseDownText );
			},

			onClick: function( e ) {

				// ensure we can't click again until we have received response
				e.data.ob.wasClicked();

				$.ajax({ url: this.action, type: 'POST', data: $(this).serialize(),
					success: function(data) {
						// alert(  e.data.ob+" muthafucking "+data.result );
						e.data.ob.actionComplete();
					}
				});
			    return e.preventDefault();
			},
		});
