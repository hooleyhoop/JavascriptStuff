-# View should be logicless
-# No Dimensions in CSS
-# If you don't have Javascript you dont need rollovers
-# Javascript-less site should be minimal and semantic

-# http://0.0.0.0:3000/widgets/simpleButton?state=1

- push( hoo_simple_button )

-# adding the data-jsclass attribute means that a javascript instance will be created
%div[_]( data-jsclass='HooSimpleButton' )
	= form_tag( "#{_.action}", :method=>:post, :remote=>true ) do

		-# Old way used a submit button. Thee are a bitch to style. So is this.
		-# Note, the position of the span is different in ie, firefox and safari (didnt even bother to check chrome)
		-# If you center it in safari it will be to low in firefox, whichever way you tweak it it will be incorrect somewhere
		-# We really should use links and javascript

		- textStyle = "font:13px Verdana; color:#{_.labelColor}; line-height:15px; padding:0 0 0 15px; position:relative; top:0px; margin:0!important; letter-spacing:0pc; word-spacing:-0.1pc;"
		- button_attrs = { :style=>"margin: 0 0 0 0; border: none; background-color:transparent; background: url( #{_.img} ) 0 #{_.size[1]*-_.state}px; width: #{_.size[0]}px; height: #{_.size[1]}px;", :name=>"commit", :title=>"", :type=>"submit", :value=>"" }
		- if(  _.state==0 )
			- button_attrs.merge!( { :disabled=>"disabled" } )
			- button_attrs[:style] += "pointer-events:none;"
			- textStyle += "opacity:0.6;"
		- else
			- textStyle += "text-shadow:0px -1px 0px #374683;"

		%button{ button_attrs }
			%span( style="#{textStyle}" )
				-# Insert the correct label for this state
				#{_.labelStates[_.state]}


:javascript
	#{_.varName}_json = #{_.jsonProperties}

- if( _.includeOnce? )

	:javascript

		/*
		 * After spending considerable time on this i have come to the conclusion that you
		 * SHOULD NOT be able to dragout of the button, then back over and have it recieve
		 * your mouse-up event. Although this seems desirable, it doesn't work if you mouse-up
		 * outside of the window.
		 * There are 2 options.. capture events for when the mouse rolls out of the window OR
		 * just return the button to normal state when you rollout
		 *
		 */
		// static objects for the button stateMachine

		/* States */
		var active_state			= HooStateMachine_state.create( {name: "active" });
		var active_down_state		= HooStateMachine_state.create( {name: "active_down" });

		// the clicked state is needed bacuse we dont want to return the button to normal
		// on mouse up we want to hold it in clicked state until the action is complete
		var clicked_state			= HooStateMachine_state.create( {name: "clicked" });
		var abortClick_state		= HooStateMachine_state.create( {name: "abort-click" });

		/* Events */
		var buttonPressed_event		= HooStateMachine_event.create( {name: "buttonPressed"} );
		var buttonReleased_event	= HooStateMachine_event.create( {name: "buttonReleased"} );
		var mouseDraggedOut_event	= HooStateMachine_event.create( {name: "mouseDraggedOutside"} );
		var clickComplete_event		= HooStateMachine_event.create( {name: "clickActionCompleted"} );
		var clickAbortComplete_event= HooStateMachine_event.create( {name: "clickAbortCompleted"} );

		/* Transitions */
		active_state.addTransition( buttonPressed_event, active_down_state );

		active_down_state.addTransition( buttonReleased_event, clicked_state );

		// These are for the version where you can drag outside of the button - its rubbish
		// var active_down_out_state	= HooStateMachine_state.create( {name: "active_down_out" });
		// var mouseDraggedWithin_event= HooStateMachine_event.create( {name: "mouseDraggedWithin"} );
		// var mouseLeftWindow_event	= HooStateMachine_event.create( {name: "mouseLeftWindow"} );
		// active_down_state.addTransition( mouseDraggedOut_event, active_down_out_state );
		// active_down_out_state.addTransition( buttonReleased_event, abortClick_state );
		// active_down_out_state.addTransition( mouseDraggedWithin_event, active_down_state );
		// active_down_out_state.addTransition( mouseLeftWindow_event, abortClick_state );

		// This is for the alternate version where dragging outside the button resets it
		active_down_state.addTransition( mouseDraggedOut_event, abortClick_state );

		clicked_state.addTransition( clickComplete_event, active_state );
		abortClick_state.addTransition( clickAbortComplete_event, active_state );

		/* Commands */
		var showMouseUpCmd 			= HooStateMachine_command.create( {name: "showMouseUp"} );
		var showMouseDownCmd 		= HooStateMachine_command.create( {name: "showMouseDown"} );
		var fireButtonActionCmd 	= HooStateMachine_command.create( {name: "fireButtonAction"} );
		var abortClickActionCmd 	= HooStateMachine_command.create( {name: "abortClickAction"} );

		active_state.addAction( showMouseUpCmd );
		active_down_state.addAction( showMouseDownCmd );

		clicked_state.addAction( fireButtonActionCmd );
		abortClick_state.addAction( abortClickActionCmd );


		/* Abstract Button */
		HooAbstractButton = HooWidget.extend({

			// forward events to 'this'
			eventTrampoline: function(e) {
				var target = e.data.target;
				var action = e.data.action;
				var arg = e.data.arg;
				target[action](arg, e);
			},

			/* JQuery helpers */
			getButton: function() {
				var buttonQuery = "#"+this.id+" button:first";
				var $button = $( buttonQuery );
				if( $button.length!=1 )
					console.error("Could not find the Button");
				return $button;
			},

			getForm: function() {
				var formQuery = "#"+this.id+" form:first";
				var $form = $( formQuery );
				if( $form.length!=1 )
					console.error("Could not find the form");
				return $form;
			},

			setButtonText: function( arg ) {
				var $butt = this.getButton();
				var $contents = $butt.find("span");
				$contents.text( arg );
			},

			positionBackground:function( state ) {
				var $butt = this.getButton();
				var offset = state *45;
				$butt.css( "backgroundPosition", "0px -"+offset+"px" );
			},

		});

		/* Simple Button */
		HooSimpleButton = HooAbstractButton.extend({

			_fsm_controller: undefined,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);

				if(this.json.state>0) {
					// set up our button statemachine
					var stateMachineInstance = HooStateMachine.create( {startState: active_state} );
					this._fsm_controller = HooStateMachine_controller.create( { currentState: active_state, machine: stateMachineInstance, commandsChannel: this } );

					this.setupBindings();
				}
			},

			setupBindings: function() {

				this.getButton().bind( 'mousedown', {target:this._fsm_controller, action:'handle', arg:"buttonPressed" }, this.eventTrampoline );
				this.getButton().bind( 'mouseenter', {target:this._fsm_controller, action:'handle', arg:"mouseDraggedWithin" }, this.eventTrampoline );
				this.getButton().bind( 'mouseleave', {target:this._fsm_controller, action:'handle', arg:"mouseDraggedOutside" }, this.eventTrampoline );


				this.getButton().removeAttr("disabled");
				this.getButton().css( "pointer-events", "auto" ); // control whether can be the target of mouse events

				var mouseDownText = this.json.labelStates[this.json.state];
				this.setButtonText( mouseDownText );

				// this.getForm().submit( {ob: this}, this.onClick ); // Bind submit - manually doing this
			},

			/* Incoming commands from the state machine */
			send: function( command ) {
				this[command.name](); // interpet the command as an instance method and call it
			},

			showMouseDown: function() {
				$('body').bind( 'mouseup', {target:this._fsm_controller, action:'handle', arg:"buttonReleased" }, this.eventTrampoline );

				var mouseDownText = this.json.labelStates[this.json.state+1];
				this.setButtonText( mouseDownText );

				this.positionBackground(+2);
			},

			showMouseUp: function() {
				$('body').unbind( 'mouseup' );

				var mouseDownText = this.json.labelStates[this.json.state];
				this.setButtonText( mouseDownText );

				this.positionBackground(+1);
			},

			abortClickAction: function() {
				// on complete set the button state back to normal
				this._fsm_controller.handle( "clickAbortCompleted" );
			},

			fireButtonAction: function() {

				console.log("** Click **");

				// ensure we can't click again until we have received response
				this.temporarySetEnabledState( false );

				var self = this;
				var form = this.getForm();
				form.submit(function(e) {
					// alert('Handler for .submit() called.');

					// this === form at this point
					$.ajax({ url: this.action, type: 'POST', data: $(this).serialize(),
						success: function(data) {

							self.temporarySetEnabledState( true );

							// on complete set the button state back to normal
							self._fsm_controller.handle( "clickActionCompleted" );

							console.log("** Complete **");
						}
					});

					// The next two lines are equivalent
					e.preventDefault();
					return false;
				});
				this.getForm().submit();
			},



			temporarySetEnabledState: function( boolVal ) {

				var mouseDownText = "";
				var backgroundImageState;
				if( boolVal ) {
					this.getButton().removeAttr("disabled");
					this.getButton().css( "pointer-events", "auto" );
					mouseDownText = this.json.labelStates[this.json.state];
					backgroundImageState = 1;
				} else {
					this.getButton().attr('disabled', 'disabled');
					this.getButton().css( "pointer-events", "none" );
					mouseDownText = this.json.labelStates[0];
					backgroundImageState = 0;
				}
				// this.getForm().unbind( "submit", this.onClick );
				// this.getButton().unbind( "mousedown", this.mouseDown );

				this.setButtonText( mouseDownText );
				this.positionBackground( backgroundImageState );
			},



		});


