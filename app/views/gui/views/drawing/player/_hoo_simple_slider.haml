-# View should be logicless
-# No Dimensions in CSS
-# If you don't have Javascript you dont need rollovers
-# Javascript-less site should be minimal and semantic

-# http://0.0.0.0:3000/widgets/simpleSlider?initialState=1

- push( hoo_simple_slider )

-# adding the data-jsclass attribute means that a javascript instance will be created on-load
-# Todo: I also need to have it created if it is inserted by ajax!
%div[_]( data-jsclass='HooSimpleSlider' style="position:relative; height: 15px; background:transparent url(../images/player/timeline_background.png) no-repeat left top;" )

	%div.slider
		.slidingDoor_left( style="display:block; height: 15px; overflow: hidden;" )
			.slidingDoor_right( style="display:inline-block; float: right; background:transparent url(../images/player/timeline_background.png) no-repeat right bottom; green; width: 15px; height: 15px; overflow: hidden;" )

		%div.loadProgress( style="width:180px; height: 11px; background-color:#ededed; position: absolute; top: 0; margin: 2px; opacity:0.5;" )
		%div.playProgress( style="width:180px; height: 11px; background-color:#ff005b; position: absolute; top: 0; margin: 2px;" )
		%canvas( width="100" height="12" style="position:absolute; top:0; margin:2px;" )

	-#.nubbin( style="width:20px; height:20px; background-color:#00ff00;" )

	=  insert( _.views, "" )

- if( _.includeOnce? )
	:javascript

		BusyFadeHelper = SC.Object.extend({

			_busyAlpha:			0,
			_busyFadeDirection:	false,
			_showBusy: 			false,
			_intervalId:		undefined,
			_animFunction:		undefined,

			begin: function( fps ) {
				this._showBusy = true;
				this._busyFadeDirection = true;
				this._intervalId = setInterval( this._animFunction , fps );
			},

			step: function() {

				if( this._busyFadeDirection===true && this._busyAlpha<10 ) {
					this._busyAlpha = this._busyAlpha+1;
				} else if( this._busyFadeDirection===false ) {
					this._busyAlpha = this._busyAlpha-1;
					if(this._busyAlpha==0) {
						this.onFadeOutComplete();
						this._busyAlpha = 0;
					}
				}
			},

			end: function() {
				this._busyFadeDirection = false;
			},

			onFadeOutComplete: function() {
				this._showBusy = false;
				clearInterval(this._busyIntervalId);
			}
		});


		/*
		 *
		*/
		HooSimpleSlider = HooWidget.extend({

			_$parentDiv:		undefined,
			_$canvas:			undefined,
			_loadProgressDiv:	undefined,
			_playProgressDiv:	undefined,

			_started:			false,

			_timeStep:			undefined,
			_currentTime:		undefined,

			_loadedAmount:		0,
			_playedAmount:		0,

			_maxAmount:			0,
			_maxBarWidth:		0,

			_busyFadeHelper:	undefined,
			_stateMachine: 		undefined,

			init: function( /* init never has args */ ) {

				arguments.callee.base.apply(this,arguments);

				this._$parentDiv = $( "#"+this.id );
				this._$canvas = this._$parentDiv.find( "canvas:first" );
				this._loadProgressDiv = this._$parentDiv.find( ".loadProgress:first" );
				this._playProgressDiv = this._$parentDiv.find( ".playProgress:first" );
				this._loadedAmount = 0;
				this._playedAmount = 0;
				this._timeStep = 1000/15;
				this._currentTime = 0;

				this._stateMachine = HooSliderItem.create();
				this._stateMachine._delegate = this;
				this._stateMachine._setupStateMachine( 0 );
				this._stateMachine.setInitialState( 0 );

				this._busyFadeHelper = BusyFadeHelper.create();
			},

			setupDidComplete: function() {

				this.resizeAll();
				this._started = true;

				/* Redo Bindings */
				var hasBinding = this.setup_hoo_binding( 'enabledBinding' );
				if( hasBinding==false && this.json.initialState>0 ) {
					this._stateMachine._fsm_controller.handle( "enable" );
				}

				hasBinding = this.setup_hoo_binding( 'maxAmountValueBinding' );
				hasBinding = this.setup_hoo_binding( 'loadedValueBinding' );
				hasBinding = this.setup_hoo_binding( 'playedValueBinding' );

				this._mouseClickAction = this.setup_hoo_action( 'mouseClickAction' );
			},

			// we observed a change!
			readyDidChange: function( target, property ) {

				//pbtarget.removeObserver( property, this, this.readyDidChange );
				if( target.get(property)) {
					this._stateMachine._fsm_controller.handle( "enable" );
				}
				// handle disable as well as enable?
			},

			maxAmountDidChange:  function( target, property ) {
				this.set( '_maxAmount', target[property] );
				this.recalcLoadedAndPlayedAmounts();
			},

			recalcLoadedAndPlayedAmounts: function() {
				this.setPlayAmount(this._playedAmount);
				this.setLoadAmount(this._loadedAmount);
			},

			/* get notification callback */
			loadedDidChange: function( target, property ) {

				if(this._maxAmount!=0) {
					var percent = target[property]/this._maxAmount;
					if(percent<0 || percent>1.1)
						debugger;
					else if(percent>1)
						percent = 1;
					else
						this.setLoadAmount(percent);
				}
			},

			/* get notification callback */
			playedDidChange: function( target, property ) {

				if(this._maxAmount!=0) {
					var percent = target[property]/this._maxAmount;
					if(percent<0 || percent>1.1)
						debugger;
					else if(percent>1)
						percent = 1;
					else
						this.setPlayAmount(percent);
				}
			},

			setPlayAmount: function( arg ) {
				this._playedAmount = arg;
			    this._playProgressDiv.width(this._maxBarWidth*this._playedAmount);
			},

			setLoadAmount: function( arg ) {
				this._loadedAmount = arg;
			    this._loadProgressDiv.width(this._maxBarWidth*this._loadedAmount);
			},

			getClickableItem: function() {
				return this._$parentDiv.find( ".slider" );
			},

			parentDidResize: function() {

				//if(Modernizr.canvas!==undefined)
				if(this._started===true)
					this.resizeAll();
				//}
			},

			resizeAll: function() {

				console.log("resize");
				var newWidth = this._$parentDiv.width();
				var newHeight = this._$parentDiv.outerHeight();
				var currentWidth = this._$canvas.width();
				var currentHeight = this._$canvas.outerHeight();

				if( newWidth!=currentWidth || newHeight!=currentHeight) {

					// resize canvas
					this._$canvas.attr({ width:newWidth, height:newHeight }); // setting the size resets the canvas
					var ctx = this._$canvas[0].getContext('2d');

					this._maxBarWidth = newWidth-4;
					var maxBarHeight = newHeight-4;

				    this.draw(ctx, this._maxBarWidth, maxBarHeight);

					this.recalcLoadedAndPlayedAmounts();
				}
			},

			draw: function( ctx, width, height ) {

				ctx.save();

				ctx.setTransform(1, 0, 0, 1, 0, 0);

				ctx.clearRect(0,0,width,height);

				ctx.globalAlpha = 1.0;
				ctx.globalCompositeOperation = 'source-over';

				// draw the background
				//ctx.fillStyle = "rgba(100,100,100,1)";
				//ctx.fillRect(0,0,width,height);

				// draw the slanty rects
				if( this._busyFadeHelper._showBusy===true ) {

					ctx.save();

		        ctx.beginPath();
				ctx.rect(0, 0, width-4, height);
				ctx.closePath();
				ctx.clip();

					this._busyFadeHelper.step();

					var busyAlpha = 0.4 * this._busyFadeHelper._busyAlpha/10.0;
					ctx.fillStyle = "rgba(170,160,160,"+busyAlpha+")";

					var percent = this._currentTime/1000;
					var barWidth = 5;
					var barSpace = 10;
					var numberOfBars = width/barSpace;

					var maxOffset = 10;
					var xDisplacement = maxOffset*percent;

					var x = -barWidth;
					for( var i=0; i<numberOfBars; i++ ) {

						// offset each slanty rect
						// the transform seems to mess up the clip rect th ctx.setTransform(1, 0, 0, 1, x, 0);
						ctx.beginPath();

						// draw a slanty recty
						ctx.moveTo( x+ xDisplacement, 0 );
						ctx.lineTo( x+ xDisplacement+barWidth, 0 );
						ctx.lineTo( x+ xDisplacement+barWidth-barWidth, height-4 );
						ctx.lineTo( x+ xDisplacement-barWidth, height-4 );
						ctx.closePath();
						ctx.fill();
						x = x+barSpace;
					}

					ctx.restore();
				}

				// draw a grad over the top
				ctx.setTransform(1, 0, 0, 1, 0, 0);
		        ctx.beginPath();
				ctx.rect(0, 0, width, height);

				ctx.globalCompositeOperation = 'lighter';
				gradient = ctx.createLinearGradient(0, height, 0, 0);
				gradient.addColorStop(1.0, "rgba(235, 235, 235, 0.3)");
				gradient.addColorStop(0, "rgba(0, 0, 0, 0.1)");
				ctx.fillStyle = gradient;
				//ctx.fill();

				ctx.restore();
			},

			toggleBusy: function() {
				if(this._busyFadeHelper._showBusy)
					this.stopBusy();
				else
					this.startBusy();
			},

			startBusy: function() {

				var self = this;
				this._busyFadeHelper._animFunction = function() {
					var ctx = self._$canvas[0].getContext('2d');
				    self.draw(ctx, self._$parentDiv.width(), self._$parentDiv.outerHeight());
					self._currentTime = (self._currentTime + self._timeStep) % 1000;
				}
				this._busyFadeHelper.begin( self._timeStep );
			},

			stopBusy: function() {
				this._busyFadeHelper.end();
			},

			temporarySetEnabledState: function( stateIndex, enabled ) {},
			enableButton: function( stateIndex ) {},
			showMouseUpState: function( stateIndex ) {
			},

			showMouseDownState: function( stateIndex ) {
				if(this._mouseClickAction) {
					var newPos = this.localXPosition();
					this._lastDragXAmount = newPos;
					console.log("click at pos "+newPos);
					this._mouseClickAction.a.call( this._mouseClickAction.t, newPos );
				}
			},

			mouseDragged: function(e){
				if(this._mouseClickAction) {

					var xamount = this.localXPosition();  // IE fires mouse events continuously even when it doesn't move more than 1 pixel
					if( xamount!=this._lastDragXAmount) {
						this._mouseClickAction.a.call( this._mouseClickAction.t, xamount );
						this._lastDragXAmount = xamount;
					}
				}
			},

			fireAction: function( nextState, argsHash ) {
				argsHash.onCompleteAction.call( argsHash.onCompleteTarget );
			},

			// convert mouse coord to slider position
			localXPosition: function(){

				if(this._stateMachine.lastWindowEvent) {
					var x = this._stateMachine.lastWindowEvent.pageX;
					var y = this._stateMachine.lastWindowEvent.pageY;
					var pos = this._loadProgressDiv.offset();
					var xval;
					// var size = [this._loadProgressDiv.width(), this._loadProgressDiv.height()];
					if( pos.left>x )
						xval = 0;
					else if((pos.left + this._maxBarWidth)<x)
						xval = 1;
					else
						xval = (x-pos.left)/this._maxBarWidth;

					if(xval > this._loadedAmount)
						xval  = this._loadedAmount
					return xval;
				}
				return -1;
			}

		});
