-# http://0.0.0.0:3000/widgets/playPauseButton
-# http://0.0.0.0:3000/widgets/playPauseButton?initialState=1&percentOfCanvas=0.5

- push( hoo_play_pause_button )

-# If no javascript, what would you expect? A link that says play
%div[_]{ :data=> {'jsclass'=>'ABoo.HooPlayPauseButton'}, :style=> "width:200px; height:200px;"}
	= link_to "play mp3", "#{_.action}", {'data-jshide'=>'true'}
	= insert( _.views, "" )

- if( _.includeOnce? )
	:javascript

		// When we need some different kinds of graphics start chopping up this heirarchy
		ABoo.HooPlayPauseButtonGraphic = ABoo.HooAbstractButtonGraphic.extend( ABoo.HooCanvasViewMixin, {

			_playButtonSprite: undefined,
			_pauseButtonSprite: undefined,
			_currentSpriteState: undefined,
			_currentSprite: undefined,
			_percentOfCanvas:undefined,

			_threeStateButtonStateMachine_config: {

				"disabled": {
					"movieclip": "_playButtonSprite",
					"properties": { _isDisabled: true, _isDown: false }
				},
				"play": {
					"movieclip": "_playButtonSprite",
					"properties": { _isDisabled: false, _isDown: false }
				},
				"play_down": {
					"movieclip": "_playButtonSprite",
					"properties": { _isDisabled: false, _isDown: true }
				},
				"pause": {
					"movieclip": "_pauseButtonSprite",
					"properties": { _isDown: false }
				},
				"pause_down": {
					"movieclip": "_pauseButtonSprite",
					"properties": { _isDown: true }
				}
			},

			init: function( /* _percentOfCanvas */ ) {

				this._super();
				this._playButtonSprite = ABoo.PlayButtonSprite.create();
				this._pauseButtonSprite = ABoo.PauseButtonSprite.create();
			},

			getClickableItem: function() {
				HOO_nameSpace.assert( this._parentCanvas, "this button must be added to a canvas to work" );
				return this._parentCanvas._$canvas;
			},

			// canvas -> HooCanvasViewMixin
			drawContents: function( ctx, width, height ) {

				if(!this._currentSprite)
					return;

					var insetWidth = width*this._percentOfCanvas;
					var insetHeight = height*this._percentOfCanvas;
					var x = (width-insetWidth)/2.0;
					var y = (height-insetHeight)/2.0;
					this._currentSprite.spriteDraw( ctx, x, y, insetWidth, insetHeight );
			},

			showDisabledButton: function() {
				this.transitionToSpriteState("disabled");
			},
			showMouseUp1State: function() {
				this.transitionToSpriteState("play");
			},
			showMouseDown1State: function() {
				this.transitionToSpriteState("play_down");
			},
			showMouseUp2State: function() {
				this.transitionToSpriteState("pause");
			},
			showMouseDown2State: function() {
				this.transitionToSpriteState("pause_down");
			},

			transitionToSpriteState: function( state ) {

				if(state!=this._currentSpriteState) {
					var stateDict = this._threeStateButtonStateMachine_config[state];
					var shouldBeVisibleSpriteName = stateDict["movieclip"];
					this._currentSprite = this.get(shouldBeVisibleSpriteName);

					// make the current Sprite have the correct properties
					var shouldBePropertyValuesDict = stateDict["properties"];
					this._currentSprite.setPropertiesOfSprite( shouldBePropertyValuesDict );

					this._currentSpriteState = state;
					if(this._parentCanvas)
						this._parentCanvas.setNeedsDisplay();
				}
			},



			getOuterWidth: function() {
				debugger;
				return undefined;
			},
			setOuterWidth: function( arg ) {
				debugger;
				return undefined;
			},
			getTextContent: function() {
				debugger;
				return undefined;
			},
			getHref: function() {
				debugger;
				return undefined;
			},
			setBackgroundAndTextState: function( state ) {
				debugger;
				return undefined;
			},
			setContentText:  function( arg ) {
				debugger;
				return undefined;
			},
			positionBackground:function( state ) {
				debugger;
				return undefined;
			}
		});

		ABoo.HooPlayPauseButton = ABoo.HooFormButtonToggle.extend({

			// _started: false,
			_hooCanvas: undefined,

			// init: function( /* init never has args */ ) {
			//	this._super();
			// },

			_createGraphic: function() {
				this._buttonGraphic = ABoo.HooPlayPauseButtonGraphic.create( { _rootItemId:this.id, _percentOfCanvas:this.json.percentOfCanvas });
			},

			setupDidComplete: function() {

				// this is a bit fucked because canvas becomes graphics clickable item
				HOO_nameSpace.assert( this._hooCanvas, "this button must be added to a canvas to work" );
				this._hooCanvas.addSubview( this._buttonGraphic );

				this._super();

				//var self = this;
				//setTimeout( function(){
					// self.resizeAll();
				//}, 100 );


				// this._started = true;
				//ShiteDisplayLink.sharedDisplayLink.registerListener(this);
			},

			// TODO! ok, i dont know which way round sizing should work - resize the canvas or the player? Or both?
			//resizeAll: function() {

			//	var newWidth = this.div$.width();
			//	var newHeight = this.div$.outerHeight();
			//	this._buttonGraphic.setSize( newWidth, newHeight );
			//}
		});
