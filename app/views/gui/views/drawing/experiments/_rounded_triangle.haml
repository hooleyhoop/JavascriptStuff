- push( rounded_triangle )

-# http://0.0.0.0:3000/widgets/roundedTriangle

%div[_]{ :data=>{'jsclass'=>'RoundedTriangle'}, :style=>"width:100%; height:100%;" }
	%canvas( width="100" height="12" style="position:absolute; top:0; margin:2px;" )

- if( _.includeOnce? )
	:javascript

		DonutTestSprite = HooSprite.extend({
			draw: function( ctx, width, height, busyAngle ) {

				ctx.save();

		   			// var newCanvas = $("<canvas></canvas>")[0];
				    // var newContext = newCanvas.getContext('2d');
					// newCanvas.width = width;
					// newCanvas.height = height;

					var loadingRotAmount = Math.PI;
					var playingRotAmount = Math.PI*0.6;
					var busySpinnerAngle = busyAngle % 360 * Math.PI/180.0;
					HOO_nameSpace.assert( loadingRotAmount>=playingRotAmount, "Go on, explain to me how this happened.");

					var outerRadius = width/4;
					var innerRadius = outerRadius*0.5;

					var centrePt = [width/2.0, height/2.0];
					var startAngle = -Math.PI/2.0;
					var busySpinnerWidth = Math.PI/6.0;

					ctx.globalCompositeOperation = 'source-over';

					// loading amount
					ctx.fillStyle = "#cccccc";
					ctx.beginPath();
					ctx.moveTo(centrePt[0], centrePt[1]);
					var loadingEndAngle = startAngle+loadingRotAmount;
					ctx.arc(centrePt[0], centrePt[1], outerRadius, startAngle, loadingEndAngle, false);
					ctx.closePath();
					ctx.fill();

					// playing amount
					ctx.fillStyle = "#00ff00";
					ctx.beginPath();
					ctx.moveTo(centrePt[0], centrePt[1]);
					var playingEndAngle = startAngle+playingRotAmount;
					ctx.arc(centrePt[0], centrePt[1], outerRadius, startAngle, playingEndAngle, false);
					ctx.closePath();
					ctx.fill();

					// busy spinner
					ctx.fillStyle = "#00ffff";
					ctx.beginPath();
					ctx.moveTo(centrePt[0], centrePt[1]);
					var playingEndAngle = startAngle+playingRotAmount;
					ctx.arc(centrePt[0], centrePt[1], outerRadius, busySpinnerAngle-busySpinnerWidth/2.0, busySpinnerAngle+busySpinnerWidth/2.0, false);
					ctx.closePath();
					ctx.fill();

					// punch out the center hole
					ctx.globalCompositeOperation = 'destination-out';

					ctx.fillStyle = "#000";
					ctx.beginPath();
					ctx.moveTo(centrePt[0], centrePt[1]);
					ctx.arc(centrePt[0], centrePt[1], innerRadius, 0, Math.PI*2, false);
					ctx.closePath();
					ctx.fill();



					// ctx.drawImage(newCanvas, 0, 0);

				ctx.restore();
			}
		});




		RoundedTriangle2 = HooWidget.extend({

			_$parentDiv: undefined,
			_$canvas: undefined,
			_hooCanvas: undefined,
			_started: false,

			// stuff to go in Sprite
			_parentCanvas: undefined,
			_busyAngle: 0,

			init: function( /* init never has args */ ) {
				arguments.callee.base.apply(this,arguments);
				this._$parentDiv = $( "#"+this.id );
				this._$canvas = this._$parentDiv.find( "canvas:first" );
				this._hooCanvas = HooCanvas.create({_$canvas:this._$canvas});
				this._hooCanvas.addSubview(this);
			},

			setupDidComplete: function() {

				this.resizeAll();
				this._started = true;

				ShiteDisplayLink.sharedDisplayLink.registerListener(this);
			},

			parentDidResize: function() {

				//if(Modernizr.canvas!==undefined)
				if(this._started===true)
					this.resizeAll();
				//}
			},

			resizeAll: function() {

				var newWidth = this._$parentDiv.width();
				var newHeight = this._$parentDiv.outerHeight();
				var currentWidth = this._$canvas.width();
				var currentHeight = this._$canvas.outerHeight();
				// resize canvas
				if( newWidth!=currentWidth || newHeight!=currentHeight) {
					//console.log("resize");

					this._$canvas.attr({ width:newWidth, height:newHeight }); // setting the size resets the canvas
					this.drawNow( this._hooCanvas.ctx(), newWidth, newHeight );
				}
			},

			timeUpdate: function( time ) {
				this._busyAngle = this._busyAngle + 1;
				this._hooCanvas.setNeedsDisplay();
			},

			//-- called from canvas Here!
			drawInRect: function() {
				this.drawNow( this._hooCanvas.ctx(), this._$parentDiv.width(), this._$parentDiv.outerHeight() );
			},

			drawNow: function( ctx, width, height ) {

				try {
				ctx.save();

					ctx.setTransform(1, 0, 0, 1, 0, 0);
					ctx.clearRect(0,0,width,height);
					ctx.globalAlpha = 1.0;
					ctx.globalCompositeOperation = 'source-over';

					// var buttonSprite = PlayButtonSprite.create();
					// buttonSprite._isDisabled = false;
					// buttonSprite._isDown = true;
					// buttonSprite.draw( ctx, width, height );

					// var pauseSprite = PauseButtonSprite.create();
					// pauseSprite._isDown = true;
					// pauseSprite.draw( ctx, width, height );

					var donutTestSprite = DonutTestSprite.create();
					donutTestSprite.draw( ctx, width, height, this._busyAngle );

				ctx.restore();
				} catch(err) {
					alert(err);
				}
			}
		});

